.
//1.先复制所有的节点
//用p1遍历原链表的所有节点，把p2插入到p1的后面   
//定义一个引用p1=head，如果head不为null，新建一个引用p2，使其完全等于p1，然后让p2尾插到p1后面，即p2.next = p1.next;p1.next = p2；p1 = p2.next;
	//p1=p1.next，继续执行，直到将原链表的所有节点复制完并且均插入到原链表的后面
//2.处理random的指向原来的链表的random的指向为1==>3,2==>1,3==>3,4==>null，复制之后的新链表也要是1==>3,2==>1,3==>3,4==>null
//如果p1！=null，让p1=head（改变之后的链表的head）p2=p1.next；注意到p2.random所指的节点一直在p1.random的后一个节点，所以p2.random = p1.random.next;
//p1 = p2.next;继续循环，知道所有rsndom的指向处理完毕技术循环
//3.将链表分离
//改变链表的指向即可

class CNode {
   public int val;
   public CNode next = null;
   public CNode random = null;

    public CNode(int val) {
        this.val = val;
    }
}
public class Solution5{
	//复制所有节点
	//定义一个引用p1=head，如果head不为null，新建一个引用p2，使其完全等于p1，然后让p2尾插到p1后面，即p2.next = p1.next;p1.next = p2；p1 = p2.next;
	//p1=p1.next，继续执行，直到将原链表的所有节点复制完并且均插入到原链表的后面
	//
    public CNode complexCopy(CNode head) {
        if (head == null) {
            return null;
        }
		//复制并插入到原链表的后面
        CNode p1 = head;
        while (p1 != null) {
            CNode p2 = new CNode(p1.val);
            p2.next = p1.next;
            p1.next = p2;

            p1 = p2.next;
        }
//处理random的指向
//原来的链表的random的指向为1==>3,2==>1,3==>3,4==>null，复制之后的新链表也要是1==>3,2==>1,3==>3,4==>null
//如果p1！=null，让p1=head（改变之后的链表的head）p2=p1.next；注意到p2.random所指的节点一直在p1.random的后一个节点，所以p2.random = p1.random.next;
//p1 = p2.next;继续循环，知道所有rsndom的指向处理完毕技术循环
        p1 = head;
        while (p1 != null) {
            CNode p2 = p1.next;
            if (p1.random != null) {
                p2.random = p1.random.next;
            }

            p1 = p2.next;
        }
//分离链表
//改变链表的指向即可
        p1 = head;                //回复p1的指向
        CNode newHead = head.next;     //保存新链表的head

        while (p1 != null) {
            CNode p2 = p1.next;

            p1.next = p2.next;
            if (p2.next != null) {
                p2.next = p2.next.next;
            }

            p1 = p1.next;
        }

        return newHead;
    }

	//深度拷贝的创建链表
    private static void testComplexCopy(Solution5 solution) {
        CNode n1 = new CNode(1);
        CNode n2 = new CNode(2);
        CNode n3 = new CNode(3);
        CNode n4 = new CNode(4);

        n1.random = n3; n2.random = n1; n3.random = n3;
        n1.next = n2; n2.next = n3; n3.next = n4;

        CNode result = solution.complexCopy(n1);
       while(result!=null){
		   System.out.println(result.val);
		   result=result.next;
	   }
        System.out.println("成功");
    }
public static void main(String[] args) {
        Solution5 solution = new Solution5();
        testComplexCopy(solution);
    }
	
}



