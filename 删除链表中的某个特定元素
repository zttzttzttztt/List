//找到原链表中的某个特定数并将其删除
class Solution {
    public Node removeElements(Node head, int val) {
        Node result = null;        //新创建一个链表，存放最后的结果
        Node last = null;   // 记录目前 result 中的最后一个结点

        Node cur = head;
        while (cur != null) {
            if (cur.val == val) {             //判断是否为特定值，是的话将该数跳过继续判断
                cur = cur.next;
                continue;
            }

            Node next = cur.next;    //如果不是特定值将其尾插到result链表中

            cur.next = null;
            if (result == null) {
                result = cur;
            } else {
                last.next = cur;
            }

            last = cur;

            cur = next;
        }

        return result;
    }
}






//在链表某一个位置插入数
public class MyLinkedList {
    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);

        Node pos = head.next.next;
        pushAfter(pos, 100);

        // 1, 2, 3, 100, 4
    }
   //插入pos的后面
    private static void pushAfter(Node pos, int val) {
        Node node = new Node(val);

        node.next = pos.next;
        pos.next = node;
    }
//将pos后面的一个数删除掉
    private static void popAfter(Node pos) {
        pos.next = pos.next.next;
    }
}





//删除掉为特定值的元素

//判断如果是第一个节点，做特殊处理
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode prev = null;
        ListNode cur = head;
        
        while (cur != null) {
            if (cur.val == val) {
                if (cur == head) {
                    head = cur.next;
                } else {
                    prev.next = cur.next;
                }
            } else {
                prev = cur;
            }
            
            cur = cur.next;
        }
        
        return head;
    }
}
//先避开第一个节点，最后在做特殊处理

class Solution {
    public ListNode removeElements(ListNode head, int val) {
        if (head == null) {
            return null;
        }
        ListNode prev = head;
        ListNode cur = head.next;
        
        while (cur != null) {
            if (cur.val == val) {
                prev.next = cur.next;
            } else {
                prev = cur;
            }
            
            cur = cur.next;
        }
        
        if (head.val == val) {
            head = head.next;
        }
        
        return head;
    }
}
//给节点找一个前驱
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode tmpHead = new ListNode(-1);
        tmpHead.next = head;
        ListNode prev = tmpHead;
        ListNode cur = head;
        
        while (cur != null) {
            if (cur.val == val) {
                prev.next = cur.next;
            } else {
                prev = cur;
            }
            
            cur = cur.next;
        }
        
        return tmpHead.next;
    }
}
